name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'   # exakt dieser Pfad
  workflow_dispatch: {}  # erlaubt manuelles Starten

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Übersicht im Log
      - name: Debug repo tree
        run: |
          pwd
          ls -la
          echo "----"
          ls -la UmsatzsteuerApp_Monorepo_Starter || true
          echo "----"
          ls -la frontend || true

      # Frontend-Verzeichnis automatisch ermitteln
      - name: Determine FRONTEND_DIR
        id: detect
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "FRONTEND_DIR=frontend" >> $GITHUB_ENV
            echo "Using frontend dir: frontend"
          elif [ -f "UmsatzsteuerApp_Monorepo_Starter/frontend/package.json" ]; then
            echo "FRONTEND_DIR=UmsatzsteuerApp_Monorepo_Starter/frontend" >> $GITHUB_ENV
            echo "Using frontend dir: UmsatzsteuerApp_Monorepo_Starter/frontend"
          else
            echo "Konnte kein frontend/package.json finden." >&2
            exit 1
          fi

      # Repo-Name (für Prüfungen)
      - name: Export REPO_NAME
        run: echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

      # Node mit Cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci || npm i

      # Build (wir geben REPO_NAME auch an Vite, falls die Config es nutzt)
      - name: Build
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          VITE_BASE: "/${{ env.REPO_NAME }}/"
        run: npm run build

      # .nojekyll verhindert Jekyll-Eigenheiten
      - name: Add .nojekyll
        run: |
          touch "${{ env.FRONTEND_DIR }}/dist/.nojekyll"

      # SPA-Fallback (Deep-Links)
      - name: SPA 404 fallback
        working-directory: ${{ env.FRONTEND_DIR }}/dist
        run: cp index.html 404.html

      # Sichtprüfung: Inhalt von dist
      - name: Inspect dist contents
        run: |
          echo "Listing dist:" && ls -la ${{ env.FRONTEND_DIR }}/dist
          echo "Finding files:" && find ${{ env.FRONTEND_DIR }}/dist -maxdepth 2 -type f -print

      # Konsistenz-Check: stimmt der Base-Pfad in index.html mit dem Repo-Namen überein?
      - name: Verify base path in index.html
        run: |
          FILE="${{ env.FRONTEND_DIR }}/dist/index.html"
          BASE="/${{ env.REPO_NAME }}/"
          echo "Expecting asset paths to include: ${BASE}"
          if ! grep -q "${BASE}assets/" "$FILE"; then
            echo "FEHLER: In index.html wurde der erwartete Base-Pfad '${BASE}' nicht gefunden."
            echo "Bitte Vite 'base' prüfen."
            exit 1
          fi
          echo "Base-Pfad gefunden."

      # Upload an Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.FRONTEND_DIR }}/dist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Live-Verifikation: Seite abrufen und Status ausgeben
      - name: Verify live page
        run: |
          URL="${{ steps.deployment.outputs.page_url }}"
          echo "Checking live URL: $URL"
          for i in 1 2 3; do
            echo "Attempt $i..."
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "404" ]; then
              # Bei SPA-Fallback liefert GitHub Pages bei Deep-Links 404-Status mit unserer 404.html (ok).
              # Am Root sollte aber 200 kommen. Wir dumpen ein paar Zeilen Inhalt zu Diagnose-Zwecken:
              echo "---- first bytes ----"
              curl -s "$URL" | head -n 20
              echo "---------------------"
              break
            fi
            sleep 3
          done
